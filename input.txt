'use client';

import React, { useEffect, useState, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

interface ITest {
  _id: string;
  title: string;
  testTitle: string;
  department: string;
  subject: string;
  subjectName: string;
  startTime: string;
  endTime: string;
  marks: number;
  totalMarks: number;
  scheduledBy: string;
  createdBy: string;
}

interface IStudentAttempt {
  _id: string;
  student: {
    _id: string;
    name: string;
    email: string;
    department: string;
    registrationNumber?: string;
  };
  score: number;
  totalMarks: number;
  startTime: string;
  endTime?: string;
  timeTaken?: number;
  status: 'inprogress' | 'completed' | 'aborted';
  submittedAt: string;
}

const TeacherResultsPage: React.FC = () => {
  const router = useRouter();
  const [tests, setTests] = useState<ITest[]>([]);
  const [selectedTest, setSelectedTest] = useState<ITest | null>(null);
  const [attempts, setAttempts] = useState<IStudentAttempt[]>([]);
  const [isLoadingTests, setIsLoadingTests] = useState(true);
  const [isLoadingAttempts, setIsLoadingAttempts] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Fetch tests directly
  const fetchTests = useCallback(async () => {
    setIsLoadingTests(true);
    setError(null);
    
    try {
      const token = localStorage.getItem('token');
      console.log('Fetching tests with token:', !!token);
      
      const response = await fetch('/api/tests/teacher', {
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
      });
      
      console.log('Tests API response status:', response.status);
      
      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.message || 'Failed to fetch tests');
      }
      
      const teacherTests: ITest[] = await response.json();
      console.log('Teacher tests received:', teacherTests.length);
      
      setTests(teacherTests);
    } catch (err: any) {
      console.error('Error fetching tests:', err);
      setError(err.message);
    } finally {
      setIsLoadingTests(false);
    }
  }, []);

  // Fetch tests on component mount
  useEffect(() => {
    fetchTests();
  }, [fetchTests]);

  // Fetch attempts for a specific test
  const fetchAttemptsForTest = async (testId: string) => {
    setSelectedTest(tests.find(t => t._id === testId) || null);
    setIsLoadingAttempts(true);
    setError(null);
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/tests/${testId}/submissions`, {
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
      });
      
      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.message || 'Failed to fetch attempts');
      }
      
      const data: IStudentAttempt[] = await response.json();
      setAttempts(data);
    } catch (err: any) {
      setError(err.message);
      console.error(`Error fetching attempts for test ${testId}:`, err);
      setAttempts([]);
    } finally {
      setIsLoadingAttempts(false);
    }
  };

  // Statistics calculations
  const calculateStats = () => {
    if (!attempts.length) return null;
    
    const completedAttempts = attempts.filter(a => a.status === 'completed');
    const scores = completedAttempts.map(a => a.score);
    const totalMarks = selectedTest?.totalMarks || selectedTest?.marks || 0;
    
    const average = scores.reduce((sum, score) => sum + score, 0) / scores.length;
    const highest = Math.max(...scores);
    const lowest = Math.min(...scores);
    const passRate = completedAttempts.filter(a => a.score >= totalMarks / 2).length / completedAttempts.length * 100;
    
    return {
      totalAttempts: attempts.length,
      completedAttempts: completedAttempts.length,
      average: average,
      highest,
      lowest,
      passRate,
      totalMarks
    };
  };

  const getScoreDistribution = () => {
    if (!attempts.length) return [];
    
    const totalMarks = selectedTest?.totalMarks || selectedTest?.marks || 100;
    const ranges = [
      { label: '0-20%', min: 0, max: totalMarks * 0.2, count: 0 },
      { label: '21-40%', min: totalMarks * 0.2, max: totalMarks * 0.4, count: 0 },
      { label: '41-60%', min: totalMarks * 0.4, max: totalMarks * 0.6, count: 0 },
      { label: '61-80%', min: totalMarks * 0.6, max: totalMarks * 0.8, count: 0 },
      { label: '81-100%', min: totalMarks * 0.8, max: totalMarks, count: 0 }
    ];
    
    attempts.forEach(attempt => {
      ranges.forEach(range => {
        if (attempt.score >= range.min && attempt.score <= range.max) {
          range.count++;
        }
      });
    });
    
    return ranges;
  };

  const formatDate = (dateString?: string) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleString('en-IN', {
      year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit'
    });
  };

  const formatDuration = (seconds?: number) => {
    if (seconds === undefined || seconds === null) return 'N/A';
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes}m ${secs}s`;
  };

  const stats = calculateStats();
  const distribution = getScoreDistribution();

  return (
    <>
      <style jsx>{`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');
        
        .results-container {
          min-height: 100vh;
          background: #0f172a;
          background-image: radial-gradient(ellipse 80% 80% at 50% -20%, rgba(34, 197, 94, 0.3), rgba(15, 23, 42, 0));
          font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          position: relative;
          overflow: hidden;
        }

        .animated-background {
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: radial-gradient(ellipse 80% 80% at 50% -20%, rgba(34, 197, 94, 0.3), rgba(15, 23, 42, 0));
          animation: pulse-bg 4s ease-in-out infinite;
        }

        @keyframes pulse-bg {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.8; }
        }

        .results-content {
          position: relative;
          z-index: 10;
          padding: 2rem 1rem;
        }

        .glass-card {
          background: rgba(30, 41, 59, 0.8);
          backdrop-filter: blur(20px);
          border-radius: 24px;
          border: 1px solid rgba(34, 197, 94, 0.3);
          box-shadow: 
            0 25px 50px rgba(0, 0, 0, 0.4),
            0 0 0 1px rgba(34, 197, 94, 0.2),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .glass-card::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          height: 4px;
          background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
          border-radius: 24px 24px 0 0;
        }

        .stat-card {
          background: rgba(30, 41, 59, 0.8);
          backdrop-filter: blur(20px);
          border-radius: 20px;
          border: 1px solid rgba(34, 197, 94, 0.3);
          padding: 2rem;
          cursor: pointer;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          position: relative;
          overflow: hidden;
          box-shadow: 
            0 20px 40px rgba(0, 0, 0, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .stat-card::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          height: 4px;
          background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
          transform: scaleX(0);
          transform-origin: left;
          transition: transform 0.3s ease;
        }

        .stat-card:hover::before {
          transform: scaleX(1);
        }

        .stat-card:hover {
          transform: translateY(-8px);
          border-color: rgba(34, 197, 94, 0.6);
          box-shadow: 
            0 25px 50px rgba(0, 0, 0, 0.4),
            0 0 0 1px rgba(34, 197, 94, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .test-card {
          background: rgba(30, 41, 59, 0.8);
          backdrop-filter: blur(20px);
          border-radius: 20px;
          border: 1px solid rgba(51, 65, 85, 0.6);
          padding: 2rem;
          cursor: pointer;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          position: relative;
          overflow: hidden;
          box-shadow: 
            0 20px 40px rgba(0, 0, 0, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .test-card::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          height: 4px;
          background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
          transform: scaleX(0);
          transform-origin: left;
          transition: transform 0.3s ease;
        }

        .test-card:hover::before {
          transform: scaleX(1);
        }

        .test-card:hover {
          transform: translateY(-8px);
          border-color: rgba(34, 197, 94, 0.4);
          box-shadow: 
            0 25px 50px rgba(0, 0, 0, 0.4),
            0 0 0 1px rgba(34, 197, 94, 0.2),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .test-card.selected {
          background: rgba(34, 197, 94, 0.1);
          border-color: #22c55e;
          color: #4ade80;
          box-shadow: 
            0 25px 50px rgba(34, 197, 94, 0.3),
            0 0 0 1px rgba(34, 197, 94, 0.5),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .test-card.selected::before {
          transform: scaleX(1);
        }

        .chart-container {
          background: rgba(30, 41, 59, 0.8);
          backdrop-filter: blur(20px);
          border-radius: 20px;
          border: 1px solid rgba(34, 197, 94, 0.3);
          padding: 2rem;
          position: relative;
          overflow: hidden;
          box-shadow: 
            0 20px 40px rgba(0, 0, 0, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .chart-bar {
          background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
          border-radius: 8px 8px 0 0;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          position: relative;
          overflow: hidden;
        }

        .chart-bar::before {
          content: '';
          position: absolute;
          top: -50%;
          left: -50%;
          width: 200%;
          height: 200%;
          background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.2), transparent);
          transform: rotate(45deg);
          animation: chart-shine 3s infinite;
        }

        @keyframes chart-shine {
          0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
          50% { transform: translateX(100%) translateY(100%) rotate(45deg); }
          100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .chart-bar:hover {
          transform: scaleY(1.1) scaleX(1.05);
          box-shadow: 0 10px 30px rgba(34, 197, 94, 0.4);
        }

        .chart-bar.bg-red-400 {
          background: linear-gradient(135deg, #f87171 0%, #ef4444 100%);
        }

        .chart-bar.bg-orange-400 {
          background: linear-gradient(135deg, #fb923c 0%, #f97316 100%);
        }

        .chart-bar.bg-yellow-400 {
          background: linear-gradient(135deg, #facc15 0%, #eab308 100%);
        }

        .chart-bar.bg-green-400 {
          background: linear-gradient(135deg, #4ade80 0%, #22c55e 100%);
        }

        .chart-bar.bg-emerald-400 {
          background: linear-gradient(135deg, #34d399 0%, #10b981 100%);
        }

        .table-container {
          background: rgba(30, 41, 59, 0.8);
          backdrop-filter: blur(20px);
          border-radius: 20px;
          border: 1px solid rgba(34, 197, 94, 0.3);
          overflow: hidden;
          box-shadow: 
            0 20px 40px rgba(0, 0, 0, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .table-header {
          background: rgba(51, 65, 85, 0.6);
          backdrop-filter: blur(10px);
          border-bottom: 1px solid rgba(34, 197, 94, 0.3);
          padding: 1.5rem;
        }

        .table-row {
          background: rgba(30, 41, 59, 0.5);
          backdrop-filter: blur(10px);
          border-bottom: 1px solid rgba(51, 65, 85, 0.3);
          transition: all 0.3s ease;
        }

        .table-row:hover {
          background: rgba(34, 197, 94, 0.1);
          border-color: rgba(34, 197, 94, 0.3);
        }

        .rank-badge {
          background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: 700;
          color: white;
          box-shadow: 0 8px 20px rgba(34, 197, 94, 0.3);
          position: relative;
          overflow: hidden;
        }

        .rank-badge::before {
          content: '';
          position: absolute;
          top: -50%;
          left: -50%;
          width: 200%;
          height: 200%;
          background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.2), transparent);
          transform: rotate(45deg);
          animation: rank-shine 3s infinite;
        }

        @keyframes rank-shine {
          0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
          50% { transform: translateX(100%) translateY(100%) rotate(45deg); }
          100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .rank-badge.rank-1 {
          background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
        }

        .rank-badge.rank-2 {
          background: linear-gradient(135deg, #9ca3af 0%, #6b7280 100%);
        }

        .rank-badge.rank-3 {
          background: linear-gradient(135deg, #fb923c 0%, #f97316 100%);
        }

        .avatar-container {
          background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: 700;
          color: white;
          box-shadow: 0 8px 20px rgba(34, 197, 94, 0.3);
          position: relative;
          overflow: hidden;
        }

        .avatar-container::before {
          content: '';
          position: absolute;
          top: -50%;
          left: -50%;
          width: 200%;
          height: 200%;
          background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.2), transparent);
          transform: rotate(45deg);
          animation: avatar-shine 3s infinite;
        }

        @keyframes avatar-shine {
          0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
          50% { transform: translateX(100%) translateY(100%) rotate(45deg); }
          100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .progress-bar {
          background: rgba(51, 65, 85, 0.5);
          border-radius: 10px;
          overflow: hidden;
        }

        .progress-fill {
          height: 100%;
          background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
          border-radius: 10px;
          transition: all 0.3s ease;
          position: relative;
          overflow: hidden;
        }

        .progress-fill::before {
          content: '';
          position: absolute;
          top: -50%;
          left: -50%;
          width: 200%;
          height: 200%;
          background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.3), transparent);
          transform: rotate(45deg);
          animation: progress-shine 2s infinite;
        }

        @keyframes progress-shine {
          0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
          50% { transform: translateX(100%) translateY(100%) rotate(45deg); }
          100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .progress-fill.fail {
          background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        }

        .logo-container {
          background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
          border-radius: 20px;
          display: flex;
          align-items: center;
          justify-content: center;
          box-shadow: 0 20px 40px rgba(34, 197, 94, 0.3);
          position: relative;
          overflow: hidden;
        }

        .logo-container::before {
          content: '';
          position: absolute;
          top: -50%;
          left: -50%;
          width: 200%;
          height: 200%;
          background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.2), transparent);
          transform: rotate(45deg);
          animation: logo-shine 3s infinite;
        }

        @keyframes logo-shine {
          0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
          50% { transform: translateX(100%) translateY(100%) rotate(45deg); }
          100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .badge {
          background: rgba(34, 197, 94, 0.2);
          color: #4ade80;
          padding: 8px 16px;
          border-radius: 12px;
          font-size: 0.875rem;
          font-weight: 600;
          text-transform: uppercase;
          letter-spacing: 0.5px;
          border: 1px solid rgba(34, 197, 94, 0.3);
          display: inline-flex;
          align-items: center;
          gap: 8px;
        }

        .badge.success {
          background: rgba(34, 197, 94, 0.2);
          color: #4ade80;
          border-color: rgba(34, 197, 94, 0.3);
        }

        .badge.warning {
          background: rgba(251, 191, 36, 0.2);
          color: #fbbf24;
          border-color: rgba(251, 191, 36, 0.3);
        }

        .badge.error {
          background: rgba(239, 68, 68, 0.2);
          color: #f87171;
          border-color: rgba(239, 68, 68, 0.3);
        }

        .loading-spinner {
          border: 4px solid rgba(34, 197, 94, 0.3);
          border-top: 4px solid #22c55e;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        .floating-particles {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          pointer-events: none;
          z-index: 1;
        }

        .particle {
          position: absolute;
          width: 4px;
          height: 4px;
          background: rgba(34, 197, 94, 0.4);
          border-radius: 50%;
          animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
          0%, 100% { transform: translateY(0px) rotate(0deg); }
          50% { transform: translateY(-20px) rotate(180deg); }
        }

        .particle:nth-child(1) {
          left: 10%;
          animation-delay: 0s;
        }

        .particle:nth-child(2) {
          left: 20%;
          animation-delay: 2s;
        }

        .particle:nth-child(3) {
          left: 30%;
          animation-delay: 4s;
        }

        .particle:nth-child(4) {
          left: 40%;
          animation-delay: 1s;
        }

        .particle:nth-child(5) {
          left: 50%;
          animation-delay: 3s;
        }

        .particle:nth-child(6) {
          left: 60%;
          animation-delay: 5s;
        }

        .particle:nth-child(7) {
          left: 70%;
          animation-delay: 2.5s;
        }

        .particle:nth-child(8) {
          left: 80%;
          animation-delay: 4.5s;
        }

        .particle:nth-child(9) {
          left: 90%;
          animation-delay: 1.5s;
        }

        .title-text {
          background: linear-gradient(135deg, #ffffff 0%, #e2e8f0 100%);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
          text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }

        .subtitle-text {
          color: #cbd5e1;
          font-weight: 500;
        }

        .error-container {
          background: rgba(239, 68, 68, 0.1);
          border: 1px solid rgba(239, 68, 68, 0.3);
          border-left: 4px solid #ef4444;
          border-radius: 16px;
          padding: 2rem;
          backdrop-filter: blur(10px);
          color: #fca5a5;
        }

        @media (max-width: 768px) {
          .results-content {
            padding: 1rem;
          }
          
          .glass-card {
            margin: 1rem;
            padding: 1.5rem;
          }
          
          .stat-card {
            padding: 1.5rem;
          }
          
          .test-card {
            padding: 1.5rem;
          }
        }
      `}</style>

      <div className="results-container">
        <div className="animated-background"></div>
        
        {/* Floating Particles */}
        <div className="floating-particles">
          <div className="particle"></div>
          <div className="particle"></div>
          <div className="particle"></div>
          <div className="particle"></div>
          <div className="particle"></div>
          <div className="particle"></div>
          <div className="particle"></div>
          <div className="particle"></div>
          <div className="particle"></div>
        </div>
        
        <div className="results-content">
          {/* Header */}
          <header className="mb-10 text-center">
            <div className="badge mb-6">
              <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
              Analytics Dashboard
            </div>
            
            <div className="logo-container w-16 h-16 mb-6 mx-auto">
              <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
            </div>
            
            <h1 className="text-5xl font-bold title-text mb-4">
              Test Results Dashboard
            </h1>
            <p className="text-xl subtitle-text max-w-3xl mx-auto">
              Comprehensive analytics and insights for your scheduled tests
            </p>
          </header>

          {error && (
            <div className="error-container max-w-4xl mx-auto mb-8">
              <div className="flex items-center">
                <svg className="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <div>
                  <p className="font-semibold">Error occurred</p>
                  <p>{error}</p>
                </div>
              </div>
            </div>
          )}

          {/* Test Selection */}
          <section className="mb-12">
            <div className="glass-card p-8 max-w-6xl mx-auto relative">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center">
                  <div className="logo-container w-8 h-8 mr-3">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                  </div>
                  <h2 className="text-3xl font-bold title-text">Select Test</h2>
                </div>
                <Link 
                  href="/teacher"
                  className="badge"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                  </svg>
                  Back to Dashboard
                </Link>
              </div>
              
              {isLoadingTests ? (
                <div className="text-center py-12">
                  <div className="loading-spinner w-12 h-12 mx-auto mb-4"></div>
                  <p className="subtitle-text">Loading your tests...</p>
                </div>
              ) : tests.length === 0 ? (
                <div className="text-center py-12">
                  <div className="logo-container w-16 h-16 mx-auto mb-4">
                    <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                  </div>
                  <p className="subtitle-text text-lg">No tests found</p>
                  <p className="subtitle-text text-sm mt-2">You haven't scheduled any tests yet</p>
                  <Link href="/teacher/schedule" className="badge mt-4">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    Schedule New Test
                  </Link>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                  {tests.map(test => (
                    <div
                      key={test._id}
                      onClick={() => fetchAttemptsForTest(test._id)}
                      className={`test-card text-left ${selectedTest?._id === test._id ? 'selected' : ''}`}
                    >
                      <div className="flex items-center justify-between mb-3">
                        <div className="logo-container w-10 h-10">
                          <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                        </div>
                        {selectedTest?._id === test._id && (
                          <div className="badge success">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                            Selected
                          </div>
                        )}
                      </div>
                      <h3 className="font-bold text-lg mb-2 text-white truncate">{test.testTitle || test.title}</h3>
                      <div className="space-y-1 text-sm subtitle-text">
                        <p><span className="font-medium">Subject:</span> {test.subjectName || test.subject}</p>
                        <p><span className="font-medium">Department:</span> {test.department}</p>
                        <p><span className="font-medium">Marks:</span> {test.totalMarks || test.marks}</p>
                        <p className="text-xs opacity-75 mt-2">{formatDate(test.startTime)}</p>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </section>

          {/* Results Section */}
          {selectedTest && (
            <section className="max-w-7xl mx-auto">
              <div className="glass-card p-8 mb-8 relative">
                <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8 pb-6 border-b border-gray-600">
                  <div className="flex items-center mb-4 lg:mb-0">
                    <div className="logo-container w-10 h-10 mr-4">
                      <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                      </svg>
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold title-text">Test Results</h2>
                      <p className="text-green-400 font-semibold">{selectedTest.testTitle || selectedTest.title}</p>
                    </div>
                  </div>
                  <button 
                    onClick={() => { setSelectedTest(null); setAttempts([]); }}
                    className="badge"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                    Back to Tests
                  </button>
                </div>

                {isLoadingAttempts ? (
                  <div className="text-center py-16">
                    <div className="loading-spinner w-16 h-16 mx-auto mb-6"></div>
                    <p className="subtitle-text text-lg">Loading student results...</p>
                  </div>
                ) : attempts.length === 0 ? (
                  <div className="text-center py-16">
                    <div className="logo-container w-20 h-20 mx-auto mb-6">
                      <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
                      </svg>
                    </div>
                    <p className="subtitle-text text-xl">No submissions yet</p>
                    <p className="subtitle-text mt-2">Students haven't completed this test or data is unavailable</p>
                  </div>
                ) : (
                  <div className="space-y-8">
                    {/* Statistics Cards */}
                    {stats && (
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                        <div className="stat-card">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-sm font-medium subtitle-text mb-1">Total Attempts</p>
                              <p className="text-3xl font-bold text-green-400">{stats.totalAttempts}</p>
                            </div>
                            <div className="logo-container w-12 h-12">
                              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
                              </svg>
                            </div>
                          </div>
                        </div>

                        <div className="stat-card">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-sm font-medium subtitle-text mb-1">Average Score</p>
                              <p className="text-3xl font-bold text-green-400">{stats.average.toFixed(1)}</p>
                              <p className="text-xs subtitle-text">out of {stats.totalMarks}</p>
                            </div>
                            <div className="logo-container w-12 h-12">
                              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                              </svg>
                            </div>
                          </div>
                        </div>

                        <div className="stat-card">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-sm font-medium subtitle-text mb-1">Highest Score</p>
                              <p className="text-3xl font-bold text-green-400">{stats.highest}</p>
                              <p className="text-xs subtitle-text">out of {stats.totalMarks}</p>
                            </div>
                            <div className="logo-container w-12 h-12">
                              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                              </svg>
                            </div>
                          </div>
                        </div>

                        <div className="stat-card">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-sm font-medium subtitle-text mb-1">Pass Rate</p>
                              <p className="text-3xl font-bold text-green-400">{stats.passRate.toFixed(1)}%</p>
                              <p className="text-xs subtitle-text">≥50% marks</p>
                            </div>
                            <div className="logo-container w-12 h-12">
                              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                              </svg>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Score Distribution Chart */}
                    <div className="chart-container">
                      <h3 className="text-xl font-bold title-text mb-6 flex items-center">
                        <svg className="w-6 h-6 mr-3 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                        Score Distribution
                      </h3>
                      <div className="flex items-end space-x-4 h-64">
                        {distribution.map((range, index) => {
                          const height = attempts.length > 0 ? (range.count / attempts.length) * 100 : 0;
                          const colors = ['bg-red-400', 'bg-orange-400', 'bg-yellow-400', 'bg-green-400', 'bg-emerald-400'];
                          return (
                            <div key={range.label} className="flex-1 flex flex-col items-center">
                              <div className="w-full bg-gray-600 rounded-t-lg overflow-hidden" style={{ height: '200px' }}>
                                <div 
                                  className={`chart-bar ${colors[index]} w-full rounded-t-lg flex items-end justify-center pb-2 text-white font-semibold text-sm transition-all duration-500`}
                                  style={{ height: `${height}%` }}
                                >
                                  {range.count > 0 && range.count}
                                </div>
                              </div>
                              <div className="mt-2 text-center">
                                <p className="text-xs font-medium subtitle-text">{range.label}</p>
                                <p className="text-xs subtitle-text">{range.count} students</p>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </div>

                    {/* Detailed Results Table */}
                    <div className="table-container">
                      <div className="table-header">
                        <h3 className="text-xl font-bold title-text flex items-center">
                          <svg className="w-6 h-6 mr-3 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
                          </svg>
                          Detailed Results
                        </h3>
                      </div>
                      <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-600">
                          <thead className="bg-gray-700">
                            <tr>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Rank</th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Student</th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Registration</th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Department</th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Score</th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Percentage</th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Time Taken</th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
                            </tr>
                          </thead>
                          <tbody className="divide-y divide-gray-600">
                            {attempts
                              .sort((a, b) => b.score - a.score)
                              .map((attempt, index) => {
                                const percentage = (attempt.score / attempt.totalMarks) * 100;
                                const isPass = percentage >= 50;
                                return (
                                  <tr key={attempt._id} className="table-row">
                                    <td className="px-6 py-4 whitespace-nowrap">
                                      <div className="flex items-center">
                                        <div className={`rank-badge w-8 h-8 text-xs ${
                                          index === 0 ? 'rank-1' :
                                          index === 1 ? 'rank-2' :
                                          index === 2 ? 'rank-3' : ''
                                        }`}>
                                          {index + 1}
                                        </div>
                                      </div>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                      <div className="flex items-center">
                                        <div className="avatar-container w-10 h-10">
                                          <span className="text-white font-semibold text-sm">
                                            {attempt.student.name.charAt(0).toUpperCase()}
                                          </span>
                                        </div>
                                        <div className="ml-4">
                                          <div className="text-sm font-medium text-white">{attempt.student.name}</div>
                                          <div className="text-sm subtitle-text">{attempt.student.email}</div>
                                        </div>
                                      </div>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm subtitle-text">
                                      {attempt.student.registrationNumber || 'N/A'}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm subtitle-text">
                                      {attempt.student.department}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                      <div className="flex items-center">
                                        <span className={`text-lg font-bold ${isPass ? 'text-green-400' : 'text-red-400'}`}>
                                          {attempt.score}
                                        </span>
                                        <span className="text-sm subtitle-text ml-1">/ {attempt.totalMarks}</span>
                                      </div>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                      <div className="flex items-center">
                                        <div className="progress-bar w-16 h-2 mr-3">
                                          <div 
                                            className={`progress-fill ${isPass ? '' : 'fail'}`}
                                            style={{ width: `${percentage}%` }}
                                          ></div>
                                        </div>
                                        <span className={`text-sm font-medium ${isPass ? 'text-green-400' : 'text-red-400'}`}>
                                          {percentage.toFixed(1)}%
                                        </span>
                                      </div>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm subtitle-text">
                                      {formatDuration(attempt.timeTaken)}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                      <span className={`badge ${
                                        attempt.status === 'completed' ? 'success' :
                                        attempt.status === 'inprogress' ? 'warning' :
                                        'error'
                                      }`}>
                                        {attempt.status.charAt(0).toUpperCase() + attempt.status.slice(1)}
                                      </span>
                                    </td>
                                  </tr>
                                );
                              })}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </section>
          )}
        </div>
      </div>
    </>
  );
};

export default TeacherResultsPage;
